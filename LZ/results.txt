Program input and output are shown enclosed in braces.  The braces are not
part of the input/output, which starts with the character following the
opening brace, and ends with the character (possibly a newline) preceding
the closing brace.

Test with the following input:
{}
Test passed.
2 marks out of 2 for this test

Test with the following input:
{dOm-ef.sX[}
Test passed.
2 marks out of 2 for this test

Test with the following input:
{ q g }
Test passed.
3 marks out of 3 for this test

Test with the following input:
{	b	~	}
Test passed.
3 marks out of 3 for this test

Test with the following input:
{+|}
Test passed.
3 marks out of 3 for this test

Test with the following input:
{
V
L
}
Test passed.
3 marks out of 3 for this test

Test with the following input:
{\D\)\}
Test passed.
3 marks out of 3 for this test

Test with the following input:
{1E02345679R8}
Test passed.
3 marks out of 3 for this test

Test with the following input:
{Shall I compare thee to a summer's day?
Thou art more lovely and more temperate:
Rough winds do shake the darling buds of May,
And summer's lease hath all too short a date;
}
Test passed.
3 marks out of 3 for this test

Total mark out of 25: 25
----------------------------------------------------------------------

Your program:

#include <iostream>
#include <string>

using namespace std;

string escapeChar(char ch){
	//takes in a charecter and returns a string. In most cases the returned 
	//string is simply the one character string containing ch, However escpaed 
	//chars are returned as the representation of them i.e. char('\t') returns string("\t").

	switch (ch){
		case 9: //tab
			return string("\\t");
		case 10: //new line
			return string("\\n");
		case 32: // space
			return string("\\s");
		case 13: // carriage return
			return string("\\r");
		case 92: // backslash "\"
			return string("\\\\");
		default: 
			if (ch>= '0' && ch<='9') { //digits
				return string("\\") + string(1, ch);
			}
			return string(1,ch); //just a regular char
	}
}

int main()
{
	char in;
	while (cin.get(in)){
		cout << escapeChar(in);
	}
	if (!cin.eof()){
		//there was an error reading in
		return 1;
	}
	return 0;
}

Program input and output are shown enclosed in braces.  The braces are not
part of the input/output, which starts with the character following the
opening brace, and ends with the character (possibly a newline) preceding
the closing brace.

Test with the following input:
{}
Test passed.
4 marks out of 4 for this test

Test with the following input:
{
}
Test passed.
4 marks out of 4 for this test

Test with the following input:
{dO	m-ef.s
X[}
Test passed.
4 marks out of 4 for this test

Test with the following input:
{ffffffffff}
Test passed.
4 marks out of 4 for this test

Test with the following input:
{1
1
1
1
1
1
1
1
1
1
}
Test passed.
4 marks out of 4 for this test

Test with the following input:
{Shall I compare thee to a summer's day?
Thou art more lovely and more temperate:
Rough winds do shake the darling buds of May,
And summer's lease hath all too short a date;
}
Test passed.
5 marks out of 5 for this test

Testing that your program defines function escapeString correctly.
Test passed.
4 marks out of 4 for this test

Testing that your program uses string iterator or range-for.
Test passed: string::const_iterator found.
4 marks out of 4 for this test

Total mark from tests: 33
Mark (out of 2) for achieving N*log(N) complexity: 2
Total mark out of 35: 35
----------------------------------------------------------------------

Your program:

#include <iostream>
#include <string>
#include <set>

using namespace std;

string escapeChar(char ch){
	//takes in a charecter and returns a string. In most cases the returned 
	//string is simply the one character string containing ch, However escpaed 
	//chars are returned as the representation of them i.e. char('\t') returns string("\t").

	switch (ch){
		case 9: //tab
			return string("\\t");
		case 10: //new line
			return string("\\n");
		case 32: // space
			return string("\\s");
		case 13: // carriage return
			return string("\\r");
		case 92: // backslash "\"
			return string("\\\\");
		default: 
			if (ch>= '0' && ch<='9') { //digits
				return string("\\") + string(1, ch);
			}
			return string(1,ch); //just a regular char
	}
}

string escapeString(const string& str){
	string out;
	for (string::const_iterator it = str.begin(); it!=str.end(); ++it){
		out += escapeChar(*it); 
	}
	return out;
}

int main() {
	set<string> phrases;
	string phrase = "";
	char in;
	while (cin.get(in)){
		phrase += string(1, in);
		std::pair<std::set<string>::iterator,bool> ret;
		ret = phrases.insert(phrase);
		if (ret.second){
			//it was inserted, so should be displayed.
			cout << escapeString(phrase) << endl;
			phrase = ""; //reset the phrase
		}
	}
	if (phrase != ""){
	    //if the last phrase was in the set
	    //it still needs to be displayed
		cout << escapeString(phrase) << endl;
	}
	if (!cin.eof()){
		//there was an error reading in
		return 1;
	}
	return 0;
}

Program input and output are shown enclosed in braces.  The braces are not
part of the input/output, which starts with the character following the
opening brace, and ends with the character (possibly a newline) preceding
the closing brace.

Test with the following input:
{}
Test passed.
5 marks out of 5 for this test

Test with the following input:
{
}
Test passed.
5 marks out of 5 for this test

Test with the following input:
{dO	m-ef.s
X[}
Test passed.
6 marks out of 6 for this test

Test with the following input:
{ffffffffff}
Test passed.
6 marks out of 6 for this test

Test with the following input:
{1
1
1
1
1
1
1
1
1
1
}
Test passed.
6 marks out of 6 for this test

Test with the following input:
{yyxxyxxxyyyyyxyxxxyyxxxxx}
Test passed.
6 marks out of 6 for this test

Test with the following input:
{Shall I compare thee to a summer's day?
Thou art more lovely and more temperate:
Rough winds do shake the darling buds of May,
And summer's lease hath all too short a date;
}
Test passed.
6 marks out of 6 for this test

Total mark out of 40: 40
----------------------------------------------------------------------

Your program:

#include <iostream>
#include <string>
#include <map>

using namespace std;

string escapeChar(char ch){
	//takes in a charecter and returns a string. In most cases the returned 
	//string is simply the one character string containing ch, However escpaed 
	//chars are returned as the representation of them i.e. char('\t') returns string("\t").

	switch (ch){
		case 9: //tab
			return string("\\t");
		case 10: //new line
			return string("\\n");
		case 32: // space
			return string("\\s");
		case 13: // carriage return
			return string("\\r");
		case 92: // backslash "\"
			return string("\\\\");
		default: 
			if (ch>= '0' && ch<='9') { //digits
				return string("\\") + string(1, ch);
			}
			return string(1,ch); //just a regular char
	}
}

string escapeString(const string& str){
	string out;
	for (string::const_iterator it = str.begin(); it!=str.end(); ++it){
		out += escapeChar(*it);
	}
	return out;
}

int main() {
	map<string, unsigned int> phrases;

	//initialize the 0 phrase
	string phrase = "";
	unsigned int phrase_counter = 0;
	phrases[phrase] = phrase_counter++;

	char in;
	while (cin.get(in)){

		phrase += string(1, in); //append the char to the current phrase

		if (phrases.find(phrase) == phrases.end()){
			//phrase was not found
			//so its a new phrase
			cout << phrases[phrase.substr(0, phrase.length()-1)]
				 << escapeChar(in) << endl; //display it
			phrases[phrase] = phrase_counter++; //record it
			phrase = ""; //reset the phrase
		} //else lets go through the loop again
	}
	if (phrase!=""){
		//if the last phrase was not a new phrase
		//it still needs to be displayed.
		cout << phrases[phrase.substr(0, phrase.length()-1)] 
			 << escapeChar(in) << endl;
	}
	if (!cin.eof()){
		//there was an error reading in
		return 1;
	}
	return 0;
}